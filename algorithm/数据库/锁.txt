事务具有原子性、一致性、隔离性、持续性四个属性,缩写字母为ACID.
1原子性:事务是一个工作单元,事务中的所有修改要么提交、要么撤销,在事务完成之前如果系统出现故障,
重新启动时SQL Server会撤销所做的修改.
2一致性:一致性是指数据的状态,RDMS提供了以并发事务修改和查询数据的能力.
3隔离性:隔离是用于控制访问数据的机制,确保事务所访问数据是在其期望的一致性级别中的数据,
SQL Server支持两种不同的模式来处理隔离:基于锁的传统模式和基于行版本控制的新模式,
在企业内部部署的SQL Server中,默认是基于锁的模式.
4持续性:数据修改写入到数据库磁盘上的数据部分之前,总是先写入到数据库的事务日志磁盘,在提交之后,
指令记录在事务日志的磁盘上,在尚未修改磁盘上的数据部分之前,事务被认为是持续的,在系统正常或是出现故
障启动时,SQL Server将检查每个数据库的事务日志并执行具有两个阶段的恢复过程-重做和撤销.



事务隔离级别总共有6个隔离级别:
READ UNCOMMITTED(未提交读,读脏),相当于(NOLOCK)
READ COMMITTED(已提交读,默认级别)
REPEATABLE READ(可以重复读),相当于(HOLDLOCK)
SERIALIZABLE(可序列化)
SNAPSHOT(快照)
READ COMMITTED SNAPSHOT(已经提交读隔离)
对于前四个隔离级别:READ UNCOMMITTED<READ COMMITTED<REPEATABLE READ<SERIALIZABLE
隔离级别越高,读操作的请求锁定就越严格,锁的持有时间久越长;所以隔离级别越高,一致性就越高,
并发性就越低,同时性能也相对影响越大.


READ_UNCOMMITTED:读取者不取锁,会出现脏读现象(读取者读到了写入者还没有提交的数据）.

READ_COMMITTED:它是企业内部部署的SQL Server默认隔离级别.读取者获得共享锁,但是读取完成后便不再持有锁.
解决了脏读,但会出现丢失更新(丢失更新主要发生在两个事务读取一个值时,同时基于读取的值进行更新,
由于在该隔离级别中读取后不会再该资源上持有锁,两个事务都可以更新其值,并且最后更新该值的事务将会
覆盖另外一个事务的更新.产生的主要原因还是读取者在读取完成后便不再持有共享锁导致的）和不可重复读
(在读取间隙,读取者不再持有共享锁,那么写入者便可以更改数据造成前后读取不一致的现象）的问题.


REPEATABLE READ(可重复读):保证在一个事务中的两个读操作之间,其他的事务不能修改当前事务
读取的数据,该级别事务获取数据前必须先获得共享锁同时获得的共享锁不立即释放一直保持共享
锁至事务完成,所以此隔离级别查询完并提交事务很重要.
Repeatable Read:读取者直到事务结束一直持有共享锁.这意味着直到读取者事务结束都没有写入者能够修改资源.
解决了丢失更新和不可重复读的问题,但是容易引发死锁(多个读取者第一次都获得了共享锁但是在接下来谁都无法
获得排他锁的现象.原因就是锁的持续时间到了事务结束之后,然而事务既可以读取也可以写入导致的问题）
虽然这种模式能够保证读取者前后读取的一致性,但是会出现幻读(共享锁还是互斥锁都 保留到了事务结束,
但是无法阻止其他人运行新增操作,导致第一次查询时没有数据,第二次查询时却有了数据.被称为“幻读”）.

Serializable为了防止幻影读取,需要将隔离级别提升为SERIALIZABLE,最重要的部分是SERIALIZABLE隔离级别的行
为类似于REPEATABLE READ即它要求读取者获取一个共享锁来进行读取,并持有锁到事务结束,但是SERIALIZABLE隔离
级别添加了另外一个方面-在逻辑上,该隔离级别要求读取者锁定查询筛选所限定的键的整个范围.这意味着读取者锁
定的不仅是查询筛选限定的现有行,也包括将来行,或者准确地说,它会阻止其他事务尝试添加读取者查询筛选限定的行.

