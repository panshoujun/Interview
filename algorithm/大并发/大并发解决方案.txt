大并发其实就是处理大量的请求，那么我们要如何处理或者响应这些请求呢。

这里我们就需要分架构层面和代码层面了。

我先说架构层面
我把请求处理分为三个层级
一客户端  二应用程序服务器 三数据库服务器
我们应该尽可能的上层处理掉请求。

一客户端 
1在客户端这块我们可以尽可能少的发起请求,比如一次请求能获取到的数据我们不要
分多次请求来获取数据。
2根据业务分析比如某些页面或者功能会有大量提交请求(比如下单，秒杀，抢购)我们在
这些提交功能时做一个验证码,让他的请求频率变低
3某些特定功能我们还可以在提交完成以后把按钮变灰防止重复提交，或者来个提交倒计时


二应用程序服务器
我们在客户端已经拦截掉或者处理掉部分请求了。但是这个时候请求依然很多请求到达了应用程序服务器
1这个时候我们首先想到的就是做缓存，根据业务分析我们需要把经常用到的数据做缓存(比如说秒杀商品，
专区商品)，缓存这块的话有本地缓存和分布式缓存，个人建议使用分布式缓存易于后续扩展。
2如果说请求量非常大，达到了单台应用程序服务器承载处理请求的上线，我们这个时候就需要做集群了，
用一台前置机和n台应用程序服务器。(应用服务器的多少可以根据业务量来增加)，前置机主要就是通过nginx
做请求分发,请求分发的策略有平均轮询，加权轮询，ip_hash,url_hash。如果应用程序服务器性能差不多我们
就用平均轮询，如果应用程序服务器性能有较大差异，我们可以用加权轮询，服务器性能好的权重大，反之权重小。
3如果说我们应用服务器里面包含了很多图片，视频，文档等文件信息，我们还可以把这些文件单独放到一台文件服务器上
我们称之为文件服务器,当然js,css等文件也可以放上去。为了提升访问速度我们可以压缩js，css等文件。
图片的话做缩略图，其次为了再次提高访问速度我们可以做cdn加速。



三数据库服务器
客户端 ，应用服务器该做的优化都做了，现在有大量请求达到了数据库。
我们就要想办法提高数据库承载能力。
1首先我们应该做读写分离。因为80%的业务都是做查询20%是增删改，所以我们做1主n从，这个n根据实际业务情况来确定
2然后就是分库分表
我们先来说说分库
垂直分:
按业务分 电商平台分成 仓储库 订单库  用户库 等等
水平分:
我们可以地区划分比如华南-华北-华东(每个库数据库结构一样，数据库不一样)
我们还可以按时间划分比如按年份

因为分裤了所以有些查询就比较麻烦
查询麻烦我们可以按业务划分
1比如说报表形式的，数据不是那么即时的。我们可以做汇总数据比如在凌晨做数据同步，然后统计出来
2即时查询->Service（服务）
3业务妥协，变更业务，让查询好做。比如一个列表涉及到2个库信息。我们可以做成展开式的。先看到一个库的信息
另一个库的信息点加号时获取信息


分表
我们也可以分为垂直分表 和 水平分表
垂直分表  其实就是拆表把一个表分成1一个或者多个。比如订单表我们就分了订单主表和订单详情表
水平分表  按时间分或者地区 时间话一般按照年表明后面带年份，地区雷同
解决查询问题的话和分裤差不多

编程方面的话
主要的就是优化程序实现逻辑和优化sql
程序编码这块
1尽量避免循环嵌套
2采用异步编程
sql优化的话
1避免使用关键字：or ，in，not in ，!=，<>，
避免使用select *(给出具体字段)，
尽量避免null值的判断(给默认值)，
尽量避免在字段开头模糊查询
2尽量避免子查询，大部分子查询都可以连接查询
3用到or的地方可以使用union去代替实现
4用到in的地方可以使用exists去代替
5尽量避免在where条件中等号的左侧进行表达式、函数操作，
7合理的增加冗余的字段（减少表的关联查询）
6分析sql的索引是否可以用上
explain查询sql的执行计划,重点关注的几个列就是，type是不是全表扫描
看一下索引是否能够用的上,主要看key使用的是哪个索引
看一下rows扫描行数是不是很大
