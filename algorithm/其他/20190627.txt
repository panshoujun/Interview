MVC有几种向页面绑定数据的方法
1、指定页面数据的强类型Module  2、使用ViewData绑定到页面 3、使用ViewBag绑定到页面

查询第10页数据,每页8条 .Skip(72).Take(8)  
Take(PageSize * CurPage).Skip(PageSize * (CurPage - 1));//进行分页

DataReader与Dataset有什么区别？
答：一个是只能向前的只读游标，一个是内存中的表。

ASP.net的身份验证方式有哪些？分别是什么原理？
答：1Windwos(默认)用IIS控制2From(窗体)用帐户3Passport(密钥)

请说明在.net中常用的几种页面间传递参数的方法，并说出他们的优缺点。
答：1session(viewstate) 简单，但易丢失 2application全局
3cookie简单，但可能不支持，可能被伪造 4inputttype="hidden" 简单，可能被伪造
5url参数 简单，显示于地址栏，长度有限 不安全 6数据库 稳定，安全，但性能相对弱
7缓存

重载与覆盖的区别？
1、方法的覆盖是子类和父类之间的关系，是垂直关系；方法的重载是同一个类中方法之间的关系，是水平关系
2、覆盖只能由一个方法，或只能由一对方法产生关系；方法的重载是多个方法之间的关系。
3、覆盖要求参数列表相同；重载要求参数列表不同。
4、覆盖关系中，调用那个方法体，是根据对象的类型（对象对应存储空间类型）来决定；重载关系，是根据调       
用时的实参表与形参表来选择方法体的。

静态成员和非静态成员的区别？
静态变量使用 static 修饰符进行声明，静态成员在加类的时候就被加载（上一篇中提到过，
静态字段是随类型对象存放在Load Heap上的），通过类进行访问。
不带有static 修饰符声明的变量称做非静态变量，在对象被实例化时创建，通过对象进行访问 。
一个类的所有实例的同一静态变量都是同一个值，同一个类的不同实例的同一非静态变量可以是不同的值 。
静态函数的实现里不能使用非静态成员，如非静态变量、非静态函数等。

a.Equals(b)和a==b相同吗？
对于值类型的比较两者效果相同(值类型ValueType重写了Equals方法)。对于除string以外的引用类型
==比较对象是否为同一引用，对于string，==比较字符串的内容。而Equals方法对所有引用对象都是
比较其是否为同一对象的引用。很多自定义类都会重写Equals所以不要只注意默认实现。

var和dynamic的区别
1.var表示“变量的类型是在编译时决定的”， var让你在初始化变量时少输入一些字，编译器会根据右值
来推断出变量的类型， var只能用于局部变量的定义，你不能把类的属性定义成 var，也不能把方法的返
回值类型或者是参数类型定义成var
2.dynamic表示“变量的类型是在运行时决定的”，动态语言运行时（dynamic language runtime DLR）
是.NET Framework 4 Beta 1中的一组新的API，它提供了对c#中dynamic类型的支持,dynamic告诉编译器，
根本就别理究竟是啥类型，运行时再推断不迟，dynamic类型并没有跳过类型校验，只是延迟到了运行时。
如果在运行时，检测到类型不兼容，照样会抛出异常。变量，属性，方法返回值类型及参数类型都可定义为dynamic。

readonly(运行时常量)与const(编译时常量)
const定义时必须初始化
readonly可以在定义时或者构造函数中初始化
const关键字用来声明编译时常量，readonly用来声明运行时常量。都可以标识一个常量，
主要有以下区别： 
1、初始化位置不同。const必须在声明的同时赋值；readonly即可以在声明处赋值，
也可以在构造方法里赋值。 
2、修饰对象不同。const即可以修饰类的字段，也可以修饰局部变量；readonly只能修饰类的字段 。 
3、const是编译时常量，在编译时确定该值，且值在编译时被内联到代码中；
readonly是运行时常量，在运行时确定该值。 
4、const默认是静态的；而readonly如果设置成静态需要显示声明 。 
5、支持的类型时不同，const只能修饰基元类型或值为null的其他引用类型；readonly可以是任何类型。

在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？
using 指令和语句 new 创建实例 new 隐藏基类中方法。
答：using 引入名称空间或者使用非托管资源，使用完对象后自动执行实现了IDisposable
接口的类的Dispose方法 new 新建实例或者隐藏父类方法或者泛型约束

什么是虚函数？什么是抽像函数？作用？
虚函数：可由子类继承并重写的函数。关键词virtual声明，重写override。
抽像函数：规定其非虚子类必须实现的函数，必须被重写。关键词abstract声明，重写override。
主要用于对象对象的多态，在子类中重写方法，达到相同的操作，不同的行为效果。
1虚方法有方法体，抽象方法没有方法体。抽象方法是一种强制派生类覆盖的方法，否则派生类将不能被实例化；
2抽象方法只能在抽象类中声明，虚方法不是；
3非抽象派生类必须重写抽象类中的抽象方法，虚方法则不必要。

请解释一下ICloneable
当用户需要实现除MemberwiseClone(浅拷贝 原始对象及其复本引用的是同一对象)
之外的拷贝方法时（如深拷贝），用户可以实现ICloneable接口，并重写Clone()方法。
在Clone()方法中编写自己的实现。

简述 private、 protected、 public、internal 修饰符的访问权限。
private : 私有成员, 在类的内部才可以访问。
protected: 保护成员，该类内部和继承类中可以访问。
public: 公共成员，完全公开，没有访问限制。
internal:在同一命名空间内可以访问。

 为什么不提倡catch(Exception)？
Exception类包含许多子类，程序执行的时候要将每一个类都搜索一遍以找到符合的
异常类，这样是蛮消耗资源的，影响程序运行效率。另外，只捕捉特定环境，特定
条件下的异常，并进行处理。不应该捕捉所有异常，因为有些异常是我们所无法预料到的，
比如，内存溢出或其他错误，这种情况下，不应该让系统以一种未知状态继续运行。

abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?
答：abstract需要重载,static为类方法,没有重载一说 abstract为没有实现的方法,
native为本机实现的方法,自相矛盾 abstract方法没有实现,也不可能实际调用抽象方法,
没有必要synchronized修饰,当然子类可以根据需要同步该方法.所以 都不能.

您在什么情况下会用到虚方法或抽象类，接口？
1.如果某个方法可能性在派生类中会被重写。这时就将该方法写为虚方法。
2.抽象类：是一个类型，与派生类之间的关系是一个“ISA”的关系。用来做基类，
抽象类不能创建对象，类中包括抽象方法和实例方法。
3.接口：是设计一个规范，描述了Can do ；与实现类之间是中”LINE A 的关系，
C#中接口不能包含字段访问修饰符。

委托
Delegate至少0个参数，至多32个参数，可以无返回值，也可以指定返回值类型
Func可以接受0个至16个传入参数，必须具有返回值,它的最后一个参数是返回类。例如：Func <int>表示无参
Func<string, string> say = m => m + m;
Console.WriteLine(say("abc"));　　　　//输出abcabc
Action可以接受0个至16个传入参数，无返回值
predicate 是返回bool型的泛型委托 predicate<int> 表示传入参数为int 返回bool的委托 
Predicate有且只有一个参数，返回值固定为bool，使用方法与Action类似。

抽象类和接口有哪些区别？
相同点： 
1. 都不能被直接实例化。 
不同点 :
(1)接口只有定义，而抽象类的方法可以在抽象类中被实现。
(2)接口支持多继承；抽象类不能实现多继承。
(3)接口是一组行为规范；抽象类是一个不完全的类，着重族的概念。 
(5)接口只包含方法、属性、索引器、事件的签名，但不能定义字段和包含实现的方法；
抽象类可以定义字段、属性、包含有实现的方法。 
(6)接口可以作用于值类型和引用类型；抽象类只能作用于引用类型。例如，Struct就可以继承接口，而不能继承类。
(8)如果抽象类实现接口，则可以把接口中方法映射到抽象类中作为抽象方法而不必实现，
而在抽象类的子类中实现接口中方法

简述string[]、ArrayList和List的区别
数组结构的特点：
1数组分配在一块连续的数据空间上，因此在分配空间时必须确定长度。
2数据元素类型相同。3数据元素的下标具有上下边界约束且下标有序。
数组的优缺点：
1数组在内存中是连续存储的，所以它的索引速度非常快，而且赋值与修改元素也很简单，效率高，为o(1)。
缺点：
1数组必须在声明的时候指定数组长度和维数，并且在存取数组元素的时候不能越界，越界会造成数据溢出错误。
2插入和删除元素效率比较低，且比较麻烦。
ArrayList
1ArrayList数组的长度可以动态指定，其大小可以在初始化时指定，也可以不指定，因此其在
托管堆上存放并不一定连续。
2ArrayList数据可以存放不同类型数据（因为它里面存放的都是被装箱了的Object类型，实际上
ArrayList内部就是使用"object[] _items;"这样一个私有字段来封装对象的）。
3ArrayList可以在任意位置插入或删除数项。
优点：
1初始化时可以不指定长度，并且可以动态插入或删除项，其长度可以动态扩充和收缩。
2存放的数据类型可以是不同类型的数据。
缺点：
ArrayList不是类型安全的，其插入的数据当做Object类型处理，
因此在处理数据是可能会报类型不匹配错误。
2由于存在装箱和拆箱操作，会带来很大的性能损耗，所以存取效率低。
List
1声明时必须指定数据集内元素的数据类型，且数据元素类型必须相同。
2可以动态插入或删除数据元素。
3数据操作是类型安全的且不存在装箱和拆箱操作，因此效率较高。

ajax的优缺点是什么?
ajax的优点
最大的一点是页面无刷新，在页面内与服务器通信，给用户的体验非常好。
使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。
可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担,
基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。
ajax的缺点
ajax干掉了back按钮，即对浏览器后退机制的破坏
安全问题因为ajax技术就像是直接建立一个通道,会暴露比以前数据和服务器逻辑
对搜索引擎的支持比较弱
一些手机设备现在还不能更好的支持ajax