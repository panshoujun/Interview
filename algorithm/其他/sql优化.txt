0减少访问数据库的次数
1、在表中建立索引，优先考虑where、group by使用到的字段。
2、尽量避免使用select *，返回无用的字段会降低查询效率
优化方式：使用具体的字段代替*，只返回使用到的
字段
3、尽量避免使用in 和not in，会导致数据库引擎放弃索引进行全表扫描
优化方式：如果是连续数值，可以用between代替
如果是子查询，可以用exists代替
4、尽量避免使用or，会导致数据库引擎放弃索引进行全表扫描
优化方式：可以用union代替or 、
如果or两边的字段是同一个，如例子中这样。貌似两种方式效率差不多
5、尽量避免在字段开头模糊查询，放弃索引进行全表扫描( LIKE '%li%')
 优化方式：尽量在字段后面使用模糊查询（LIKE 'li%'）
 6、尽量避免进行null值的判断，引擎放弃索引进行全表扫描
 优化方式：可以给字段添加默认值0，对0值进行判断
 7、尽量避免在where条件中等号的左侧进行表达式、函数操作，
 会导致数据库引擎放弃索引进行全表扫描（WHERE score/10 = 9）
 优化方式：可以将表达式、函数操作移动到等号右侧(WHEREscore=10*9)
 8、当数据量大时，避免使用where 1=1的条件。通常为了方便拼装查询条件
 ，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描
 优化方式：用代码拼装sql时进行判断，没where加where，有where加and。
 9二者都能使用尽量使用where （与having比较）
 where 先过滤（数据就少了）在分组  
10理论上，尽量使用多表连接（join）查询（避免子查询）
11合理的增加冗余的字段（减少表的关联查询）
12尽量用union或者union all代替(在确认没有重复数据或者
不用剔除重复数据时，union all会更好)；
13增加中间表进行优化（这个主要是在统计报表的场景，
后台开定时任务将数据先统计好，尽量不要在查询的时候去统计）；
14建表的时候能使用数字类型的字段就使用数字类型
（type,status…），数字类型的字段作为条件查询比字符串快。
这是因为引擎在处理查询和连接时会逐个比较字符串中每一
个字符，而对于数字型而言只需要比较一次就够了；
15那些可以过滤掉最大数量记录的条件必须写在where字句的最末尾
16在使用索引字段作为条件时，如果该索引是复合索引,那么必须使
用到该索引中的第一个字段作为条件时才能保证系统使用该索引,否则
该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致
17索引并不是越多越好，索引固然可以提高相应的 select 的效率
，但同时也降低了 insert 及 update 的效率，因为 insert 或 
update 时有可能会重建索引，所以怎样建索引需要慎重考虑，
视具体情况而定。一个表的索引数最好不要超过6个，若太多则应
考虑一些不常使用到的列上建的索引是否有 必要；

1.什么是索引
索引指数据库的目录，比如：字典上面的字母目录 (适用于大数据量)
2.建立索引的优缺点
优点:查询速度快
缺点：增删改慢，因为数据库要同步去维护索引文件，所以速度慢
5.一般你们会在什么情况下加索引
1.主键自动建立唯一索引
2.频繁作为查询条件的字段应该创建索引
3.查询中与其他表关联的字段，外键关系建立索引
4.单键/组合索引的选择问题，组合索引的性价比更高
5.查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度
6.查询中统计或者分组字段。
7.过滤条件好的字段选择一段选择加索引

sql优化您们是怎么做的？
一.首先开启数据库慢查询日志，定位到查询效率比较低的sql , 找出对应的sql语句并进行分析
1.表设计是否规范，是否符合三范式的标准
（1）第一范式：保证原子性（不可拆分）
（2）第二范式：每张表都有主键
（3）第三范式（每一列都有主键相关)
2.查看数据表中是否存在大量的冗余字段，字段数据类型是否合理
3.尽可能的使用varchar代替char 建表数据类型，能用数值的绝对不用字符存储
4.尽量避免null值，使用默认值替代空值，数值型可以使用0，字符型可以使用空字符串
二.查看sql语句是否规范
（1）避免使用关键字：or ，in，not in ，!=，<>，避免使用select *
（2）尽量避免子查询，大部分子查询都可以连接查询
（3）用到or的地方可以使用union去代替实现
（4）用到in的地方可以使用exists去代替
三.分析sql的索引是否可以用上
（1) explain查询sql的执行计划,重点关注的几个列就是，type是不是全表扫描
（2）看一下索引是否能够用的上,主要看key使用的是哪个索引
（3）看一下rows扫描行数是不是很大